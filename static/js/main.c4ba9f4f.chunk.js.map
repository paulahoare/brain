{"version":3,"sources":["brain_logo.svg","Brain_Journal.xml","load_rss_data.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","load_rss_data","load_file","callback_Success","callback_Error","fetch","then","response","text","responseData","rssParser","rss","error","App","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","className","src","logo","alt","App_Journal","Component","Journal","_Component2","props","_this","call","state","title","pubDate","url","isLoaded","articles","onDataLoadError","bind","assertThisInitialized","onDataLoad","JournalDetails","link","App_Articles","_this2","rss_file","setState","lastPublished","links","length","items","console","log","PublishedDate","pubClass","AppLink","Articles","_Component3","articles_list","Array","isArray","map","article","num","id","authors","name","published","timePos","indexOf","slice","pubLabel","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c4ba9f4f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/brain_logo.8d25adc3.svg\";","module.exports = __webpack_public_path__ + \"static/media/Brain_Journal.c95ef548.xml\";","// --------------------------------------------------------------------\r\n// 1mwtt Summer of Code Hackathon\r\n// OUP Brain Journal React App\r\n// Author: Paula Hoare\r\n// --------------------------------------------------------------------\r\n// Function load_rss_data()\r\n// --------------------------------------------------------------------\r\n\r\n// rssParser: https://www.npmjs.com/package/react-native-rss-parser\r\nimport * as rssParser from 'react-native-rss-parser';\r\n\r\n// --------------------------------------------------------------------\r\n// load_rss_data()\r\n// --------------------------------------------------------------------\r\n// Function to asynchronously load an RSS file\r\n// - on success calls callback_Success()\r\n//   argument: rss - Object returned from rssParser\r\n// - on failure calls callback_Error()\r\n//\r\nfunction load_rss_data(load_file, callback_Success, callback_Error) {\r\n  fetch(load_file)\r\n    .then((response) => response.text())\r\n    .then((responseData) => rssParser.parse(responseData))\r\n    .then(\r\n      (rss) => {\r\n        callback_Success(rss)\r\n      },\r\n      (error) => {\r\n        callback_Error(error)\r\n      }\r\n   )\r\n}\r\n\r\nexport default load_rss_data;\r\n","// --------------------------------------------------------------------\n// 1mwtt Summer of Code Hackathon\n// OUP Brain Journal React App\n// Author: Paula Hoare\n// --------------------------------------------------------------------\nimport React, { Component } from 'react';\nimport logo from './brain_logo.svg';\nimport './App.css';\nimport rss_file from './Brain_Journal.xml';  // Brain Journal RSS file\nimport load_rss_data from './load_rss_data.js';\n\nexport class App extends Component {\n  render() {\n    return(\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"App-brand\">OXFORD Academic</div>\n          <div className=\"App-logo\">\n            <img src={logo} alt=\"Brain, a Journal of Neurology\" />\n          </div>\n        </header>\n        <Journal />\n      </div>\n    )\n  }\n}\n\nexport class Journal extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      title: null,\n      pubDate: null,\n      url: null,\n      error: null,\n      isLoaded: false,\n      articles: null,\n    }\n    this.onDataLoadError = this.onDataLoadError.bind(this)\n    this.onDataLoad = this.onDataLoad.bind(this)\n  }\n\n  render() {\n    if (!this.state.isLoaded) {\n      // waiting for load of RSS data\n      return(\n        <section className=\"App-loading\">\n          Loading current journal...\n        </section>\n      )\n    } else if (this.state.error) {\n      // there was an error loading the RSS\n      return(\n        <section className=\"App-error\">\n          Error: Failed to load current journal.\n        </section>\n      )\n    } else {\n      // success - we have our data from the RSS file\n      return (\n        <section className=\"App-content\">\n          <JournalDetails\n            pubDate={this.state.pubDate}\n            title={this.state.title}\n            link={this.state.url}\n          />\n          <Articles articles={this.state.articles} />\n        </section>\n      )\n    }\n  }\n\n  componentDidMount() {\n    // call load_rss_data to asynchronously load the Brain Journal RSS file\n    load_rss_data(\n      rss_file,\n      (rss) => {\n        this.onDataLoad(rss)\n      },\n      (error) => {\n        this.onDataLoadError(error)\n      }\n    )\n  }\n\n  // callback function from load_rss_data() on success\n  // argument: rss - Object returned from rssParser\n  // see https://www.npmjs.com/package/react-native-rss-parser\n  onDataLoad(rss) {\n    this.setState({\n      isLoaded: true, // ready to re-render the Component\n      title: rss.title,\n      pubDate: rss.lastPublished,\n      url: rss.links.length ? rss.links[0].url : null,\n      articles: rss.items,\n    })\n  }\n\n  // callback function from load_rss_data() on failure\n  onDataLoadError(error) {\n    this.setState({\n      isLoaded: true,   // ready to re-render the Component...\n      error: true,      // ... but there was an error loading the RSS data\n    })\n    console.log(\"Failed to load journal RSS\")\n    console.log(error)\n  }\n\n}\n\nexport function JournalDetails(props) {\n  return (\n    <div className=\"Journal-header\">\n      <div className=\"Journal-title\">\n        {props.title}\n      </div>\n      <PublishedDate\n        pubDate={props.pubDate}\n        pubClass=\"Journal-published\"\n      />\n      <AppLink link={props.link} />\n    </div>\n  )\n}\n\nexport class Articles extends Component {\n  render() {\n    const articles_list = !Array.isArray(this.props.articles) ?\n      <div className=\"Articles-none\">No articles found.</div> :\n      this.props.articles.map((article, num) => {\n        // if (num === 0) {\n        //   console.log(article)\n        // }\n        return (\n          <article key={article.id}>\n            <h3>{article.title}</h3>\n            <div className=\"Article-details\">\n              <div className=\"Article-author\">\n                {article.authors.length ? article.authors[0].name : ''}\n              </div>\n              <PublishedDate\n                pubDate={article.published}\n                pubClass=\"Article-published\"\n              />\n              <AppLink link={article.id} />\n            </div>\n          </article>\n        )\n    })\n\n    return (\n      <div className=\"Articles\">\n        {articles_list}\n      </div>\n    )\n  }\n}\n\nexport function PublishedDate(props) {\n  if (!props.pubDate) {\n    return (null)\n  }\n  const pubClass = props.pubClass ? props.pubClass : \"Article-published\"\n  const timePos = props.pubDate.indexOf(\" 00:00:00 GMT\")\n  const pubDate = timePos > 0 ? props.pubDate.slice(0, timePos) : props.pubDate\n  if (props.pubLabel === \"\") {\n    return (\n      <div className={pubClass}>\n        {pubDate}\n      </div>\n    )\n  }\n  const pubLabel = props.pubLabel ? props.pubLabel : \"Published:\"\n  return (\n    <div className={pubClass}>\n      {pubLabel + \" \" + pubDate}\n    </div>\n  )\n}\n\nexport function AppLink(props) {\n  if (!props.link) {\n    return (null)\n  }\n  return (\n    <a\n      className=\"App-link\"\n      href={props.link}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      {props.link}\n    </a>\n  )\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}